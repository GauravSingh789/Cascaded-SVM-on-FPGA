# -*- coding: utf-8 -*-
"""polynomial_svm_kernel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GKJGDxjf4OcxYx9uHEQsjoEuUWyE4DjN

# Kernel SVM

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset_mnist = pd.read_csv('mnist_train.csv')
X_train = dataset_mnist.iloc[:, 1:].values
y_train = dataset_mnist.iloc[:,0].values
print(X_train.shape)
print(y_train)
dataset_mnist_test = pd.read_csv('mnist_test.csv')
X_test = dataset_mnist_test.iloc[:,1:]. values
y_test = dataset_mnist_test.iloc[:,0].values
print(X_test.shape)
print(y_test)

print(X_train)

print(X_test)

"""## Training the Kernel SVM model on the Training set

poly kernel - (xsv.x + coef0)^degree
"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'poly', degree=2, coef0=1) 
classifier.fit(X_train, y_train)

print(classifier.support_vectors_.shape)

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
print(accuracy_score(y_test, y_pred))