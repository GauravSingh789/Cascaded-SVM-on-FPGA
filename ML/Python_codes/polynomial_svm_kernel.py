# -*- coding: utf-8 -*-
"""polynomial_svm_kernel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GKJGDxjf4OcxYx9uHEQsjoEuUWyE4DjN

# Kernel SVM

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset_mnist = pd.read_csv('mnist_train.csv')
X_train = dataset_mnist.iloc[:,1:].values
y_train = dataset_mnist.iloc[:,0].values
dataset_mnist_test = pd.read_csv('mnist_test.csv')
X_test = dataset_mnist_test.iloc[:,1:]. values
y_test = dataset_mnist_test.iloc[:,0].values

#checking whether the input has been loaded correctly
X_tr_sum = np.sum(X_train)
X_tr_sum_has_nan = np.isnan(X_tr_sum)
print(X_tr_sum_has_nan)

array_sum = np.sum(X_test)
array_has_nan = np.isnan(array_sum)
print(array_has_nan)


"""## Training the Kernel SVM model on the Training set

poly kernel - (xsv.x + coef0)^degree
"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'poly', degree=2, coef0=1) 
classifier.fit(X_train, y_train)

"""Saving the Support Vectors"""

support_vect = classifier.support_vectors_
print(classifier.support_vectors_.shape)
support_vect_int = support_vect. astype(int)
np.savetxt('support_vectors.csv', support_vect_int, delimiter=',')
print(support_vect_int)

"""Getting the values of the product (alphai*yi) and b used in the SVM decision fuction"""

product = classifier.dual_coef_
b = classifier.intercept_
np.savetxt('product_alphay.csv', product, delimiter=',')
print(product)
print(b)

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
print(accuracy_score(y_test, y_pred))